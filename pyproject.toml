[project]
name = "my-cool-app"
version = "0.0.1"
description = ""
authors = []
readme = "README.md"
requires-python = "~=3.12.0"
dependencies = ["rich>=14.1.0"]

[project.optional-dependencies]
type = ["mypy", "ty"]

lint = ["ruff"]

test = [
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-random-order",
    "detect-test-pollution",
    "tomlkit",
]

[build-system]
requires = ["uv_build>=0.8.4,<0.9.0"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-root = ""

[project.scripts]
spoofy-archiver = "my_cool_app:__main__.main"

[tool.ruff]
cache-dir = "~/.cache/ruff"
target-version = "py312"
line-length = 120

[tool.ruff.lint]
select = ["ALL"] # KG Include absolutely all of Ruff's rules.
ignore = [
    # Modules
    "DJ",  # KG Django not required
    "DTZ", # KG no need to specify timezone for time objects

    # Specific rules
    "TD002",  # KG Verbose TODO, only I work on this project
    "TD003",  # KG Verbose TODO, only I work on this project
    "ISC001", # KG conflict in the formatter
    "COM812", # KG conflict in the formatter
]

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    # Modules
    "ARG", # KG Unused function args -> fixtures nevertheless are functionally relevant
    "FBT", # KG Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    "ANN", # KG Don't care about annotations in tests
    "D",   # KG Don't care about docstrings in tests

    # Specific rules
    "S101",    # KG asserts allowed in tests.
    "SLF001",  # KG Accessing private members is needed for testing.
    "INP001",  # KG __init__.py not needed for PyTest.
    "PT004",   # KG monkeypatch doesn't return.
    "S311",    # KG I'll assume no real crypto will be done in PyTest.
    "S105",    # KG Hardcoded fake passwords are fine in tests.
    "PLR0913", # KG Tests can have as many arguments as they want.
    "BLE001",  # KG Tests can use BaseException.
]


[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
docstring-code-format = true
docstring-code-line-length = 40

[tool.pytest.ini_options]
addopts = [
    "--cov-context=test",
    "--cov=my_cool_app",
    "--cov-report=term",
    "--cov-report=html",
]
testpaths = ["tests"]

[tool.coverage.html]
show_contexts = true

[tool.mypy]
files = ["my_cool_app", "tests"]
show_error_codes = true
strict = true
enable_error_code = [
    "ignore-without-code",
    "redundant-expr",
    "truthy-bool",
    "type-arg",
    "unused-awaitable",
    "possibly-undefined",
    "redundant-self",
]
warn_unreachable = true
warn_redundant_casts = true
warn_no_return = true
